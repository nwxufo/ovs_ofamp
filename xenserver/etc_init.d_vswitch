#!/bin/bash
#
# vswitch
#
# chkconfig: 2345 09 91
# description: Manage vswitch kernel modules and user-space daemon

# Copyright (C) 2009 Nicira Networks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

. /etc/init.d/functions

test -e /etc/sysconfig/vswitch && . /etc/sysconfig/vswitch

# General config variables in /etc/sysconfig/vswitch
: ${ENABLE_BRCOMPAT:=y}
: ${ENABLE_FAKE_PROC_NET:=y}
: ${FORCE_COREFILES:=y}

# Config variables specific to ovs-vswitchd
: ${VSWITCHD_CONF:=/etc/ovs-vswitchd.conf}
: ${VSWITCHD_PIDFILE:=/var/run/ovs-vswitchd.pid}
: ${VSWITCHD_RUN_DIR:=/var/xen/vswitch}
: ${VSWITCHD_PRIORITY:=-10}
: ${VSWITCHD_LOGFILE:=/var/log/ovs-vswitchd.log}
: ${VSWITCHD_FILE_LOGLEVEL:=INFO}
: ${VSWITCHD_SYSLOG_LOGLEVEL:=ERR}
: ${VSWITCHD_MEMLEAK_LOGFILE:=}
: ${VSWITCHD_STRACE_LOG:=}
: ${VSWITCHD_STRACE_OPT:=}
: ${VSWITCHD_VALGRIND_LOG:=}
: ${VSWITCHD_VALGRIND_OPT:=}

# Config variables specific to ovs-brcompatd
: ${BRCOMPATD_PIDFILE:=/var/run/ovs-brcompatd.pid}
: ${BRCOMPATD_RUN_DIR:=/var/xen/vswitch}
: ${BRCOMPATD_PRIORITY:=-10}
: ${BRCOMPATD_LOGFILE:=/var/log/ovs-brcompatd.log}
: ${BRCOMPATD_FILE_LOGLEVEL:=INFO}
: ${BRCOMPATD_SYSLOG_LOGLEVEL:=ERR}
: ${BRCOMPATD_MEMLEAK_LOGFILE:=}
: ${BRCOMPATD_STRACE_LOG:=}
: ${BRCOMPATD_STRACE_OPT:=}
: ${BRCOMPATD_VALGRIND_LOG:=}
: ${BRCOMPATD_VALGRIND_OPT:=}

# Full paths to executables & modules
vswitchd="/usr/sbin/ovs-vswitchd"
brcompatd="/usr/sbin/ovs-brcompatd"
dpctl="/usr/bin/ovs-dpctl"
appctl="/usr/bin/ovs-appctl"
ofctl="/usr/bin/ovs-ofctl"


if [ "$ENABLE_FAKE_PROC_NET" = "y" ]; then
    if [ "$ENABLE_BRCOMPAT" != "y" ]; then
        warning "FAKE_PROC_NET required BRCOMPAT which was disabled.  Force enabling."
        ENABLE_BRCOMPAT="y"
    fi
fi

function dp_list {
    "$dpctl" show | grep '^dp[0-9]\+:' | cut -d':' -f 1
}

function turn_on_corefiles {
    ulimit -Sc 67108864
}

function remove_all_dp {
    for dp in $(dp_list); do
        action "Removing datapath: $dp" "$dpctl" del-dp "$dp"
    done
}

function insert_modules_if_required {
    if ! lsmod | grep -q "openvswitch_mod"; then
        action "Inserting llc module" modprobe llc
        action "Inserting openvswitch module" modprobe openvswitch_mod
    fi
    if [ -n "$BRCOMPATD_PIDFILE" ] && ! lsmod | grep -q "brcompat_mod"; then
        action "Inserting brcompat module" modprobe brcompat_mod
    fi
}

function remove_modules {
    if lsmod | grep -q "brcompat_mod"; then
        action "Removing brcompat module" rmmod brcompat_mod.ko
    fi
    if lsmod | grep -q "openvswitch_mod"; then
        action "Removing openvswitch module" rmmod openvswitch_mod.ko
    fi
}

function reload_vswitchd {
    if [ -f "$VSWITCHD_PIDFILE" ]; then
        "$appctl" --target=/var/run/ovs-vswitchd.`cat $VSWITCHD_PIDFILE`.ctl vswitchd/reload
    fi
}

function reload_brcompatd {
    if [ -f "$BRCOMPATD_PIDFILE" ]; then
        "$appctl" --target=/var/run/ovs-brcompatd.`cat $BRCOMPATD_PIDFILE`.ctl vlog/reopen
    fi
}

function start_vswitchd {
    local syslog_opt="-vANY:SYSLOG:${VSWITCHD_SYSLOG_LOGLEVEL}"
    local logfile_file_opt=""
    local logfile_level_opt=""
    if [ ! -d "$VSWITCHD_RUN_DIR" ]; then
        mkdir -p "$VSWITCHD_RUN_DIR"
    fi
    cd "$VSWITCHD_RUN_DIR"
    if [ -n "$VSWITCHD_FILE_LOGLEVEL" ]; then
        logfile_level_opt="-vANY:FILE:${VSWITCHD_FILE_LOGLEVEL}"
        logfile_file_opt="--log-file=$VSWITCHD_LOGFILE"
    fi
    local leak_opt=""
    if [ -n "$VSWITCHD_MEMLEAK_LOGFILE" ]; then
        leak_opt="--check-leaks=$VSWITCHD_MEMLEAK_LOGFILE"
        if [ -e "$VSWITCHD_MEMLEAK_LOGFILE" ]; then
            mv "$VSWITCHD_MEMLEAK_LOGFILE" "$VSWITCHD_MEMLEAK_LOGFILE.prev"
        fi
    fi
    local strace_opt=""
    local daemonize="y"
    if [ -n "$VSWITCHD_STRACE_LOG" ] && [ -n "$VSWITCHD_VALGRIND_LOG" ]; then
        printf "Can not start with both VALGRIND and STRACE\n"
        exit 1
    fi
    if [ -n "$VSWITCHD_STRACE_LOG" ]; then
        strace_opt="strace -o $VSWITCHD_STRACE_LOG $VSWITCHD_STRACE_OPT"
        daemonize="n"
    fi
    if [ -n "$VSWITCHD_VALGRIND_LOG" ]; then
        valgrind_opt="valgrind --log-file=$VSWITCHD_VALGRIND_LOG $VSWITCHD_VALGRIND_OPT"
        daemonize="n"
    fi
    local fake_proc_net_opt=""
    if [ "$ENABLE_FAKE_PROC_NET" = "y" ]; then
        fake_proc_net_opt="--fake-proc-net"
    fi
    if [ "$daemonize" != "y" ]; then
        # Start in background and force a "success" message
        action "Starting ovs-vswitchd ($strace_opt$valgrind_opt)" true
        (nice -n "$VSWITCHD_PRIORITY" $strace_opt $valgrind_opt "$vswitchd" --pidfile="$VSWITCHD_PIDFILE" --detach --no-chdir $fake_proc_net_opt -vANY:CONSOLE:EMER $syslog_opt $logfile_level_opt $logfile_file_opt $leak_opt "$VSWITCHD_CONF") &
    else
        action "Starting ovs-vswitchd" nice -n "$VSWITCHD_PRIORITY" "$vswitchd" --pidfile="$VSWITCHD_PIDFILE" --detach --no-chdir $fake_proc_net_opt -vANY:CONSOLE:EMER $syslog_opt $logfile_level_opt $logfile_file_opt $leak_opt "$VSWITCHD_CONF"
    fi
}

function start_brcompatd {
    local syslog_opt="-vANY:SYSLOG:${BRCOMPATD_SYSLOG_LOGLEVEL}"
    local logfile_file_opt=""
    local logfile_level_opt=""
    if [ -d "$BRCOMPATD_RUN_DIR" ]; then
        mkdir -p "$BRCOMPATD_RUN_DIR"
    fi
    cd "$BRCOMPATD_RUN_DIR"
    if [ -n "$BRCOMPATD_FILE_LOGLEVEL" ]; then
        logfile_level_opt="-vANY:FILE:${BRCOMPATD_FILE_LOGLEVEL}"
        logfile_file_opt="--log-file=$BRCOMPATD_LOGFILE"
    fi
    local leak_opt=""
    if [ -n "$BRCOMPATD_MEMLEAK_LOG" ]; then
        leak_opt="--check-leaks=$BRCOMPATD_MEMLEAK_LOGFILE"
        if [ -e "$BRCOMPATD_MEMLEAK_LOGFILE" ]; then
            mv "$BRCOMPATD_MEMLEAK_LOGFILE" "$BRCOMPATD_MEMLEAK_LOGFILE.prev"
        fi
    fi
    local strace_opt=""
    local daemonize="y"
    if [ -n "$BRCOMPATD_STRACE_LOG" ] && [ -n "$BRCOMPATD_VALGRIND_LOG" ]; then
        printf "Can not start with both VALGRIND and STRACE\n"
        exit 1
    fi
    if [ -n "$BRCOMPATD_STRACE_LOG" ]; then
        strace_opt="strace -o $BRCOMPATD_STRACE_LOG $BRCOMPATD_STRACE_OPT"
        daemonize="n"
    fi
    if [ -n "$VALGRIND_LOG" ]; then
        valgrind_opt="valgrind --log-file=$BRCOMPATD_VALGRIND_LOG $BRCOMPATD_VALGRIND_OPT"
        daemonize="n"
    fi
    appctl_cmd="$appctl --target=/var/run/ovs-vswitchd.\`cat $VSWITCHD_PIDFILE\`.ctl %s"
    if [ "$daemonize" != "y" ]; then
        # Start in background and force a "success" message
        action "Starting ovs-brcompatd ($strace_opt$valgrind_opt)" true
        (nice -n "$VSWITCHD_PRIORITY" $strace_opt $valgrind_opt "$brcompatd"--no-chdir --appctl-command="$appctl_cmd" --pidfile=$BRCOMPATD_PIDFILE -vANY:CONSOLE:EMER $syslog_opt $logfile_level_opt $logfile_file_opt $leak_opt "$VSWITCHD_CONF") &
    else
        action "Starting ovs-brcompatd" nice -n "$BRCOMPATD_PRIORITY" $strace_opt $valgrind_opt "$brcompatd" --no-chdir --appctl-command="$appctl_cmd" --pidfile=$BRCOMPATD_PIDFILE --detach -vANY:CONSOLE:EMER $syslog_opt $logfile_level_opt $logfile_file_opt $leak_opt "$VSWITCHD_CONF"
    fi
}

function stop_vswitchd {
    if [ -f "$VSWITCHD_PIDFILE" ]; then
        local pid=$(cat "$VSWITCHD_PIDFILE")
        action "Killing ovs-vswitchd ($pid)" kill -TERM $pid
        rm -f "$VSWITCHD_PIDFILE"
    fi
}

function stop_brcompatd {
    if [ -f "$BRCOMPATD_PIDFILE" ]; then
        local pid=$(cat "$BRCOMPATD_PIDFILE")
        action "Killing ovs-brcompatd ($pid)" kill -TERM $pid
        rm -f "$BRCOMPATD_PIDFILE"
    fi
}

function restart_approval {
    if test ! -t 0; then
        # Don't prompt if invoked non-interactively.
        return 0
    fi
    cat <<EOF

WARNING!!!

Restarting vswitch on a live server is not guaranteed to work.  It is
provided as a convenience for those situations in which it does work.
If you just want to reload the configuration file, use "reload"
instead of restart.

EOF
    read -s -r -n 1 -p "Countinue with restart (y/N): " response
    printf "\n"
    case "$response" in
        y|Y)
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

function start {
    if [ "$FORCE_COREFILES" = "y" ]; then
        turn_on_corefiles
    fi

    insert_modules_if_required

    # Increase the limit on the number of open file descriptors since
    # ovs-vswitchd needs a few per bridge
    ulimit -n 4096

    if [ ! -e "$VSWITCHD_CONF" ]; then
        warning "$VSWITCHD_CONF does not exist"
        action "Creating empty $VSWITCHD_CONF" touch "$VSWITCHD_CONF"
    elif [ ! -e /var/run/vswitch.booted ]; then
        touch /var/run/vswitch.booted
        /usr/bin/ovs-cfg-mod '-vANY:console:emer' -F "$VSWITCHD_CONF" \
            '--del-match=bridge.*' \
            '--del-match=port.*' \
            '--del-match=bonding.*' \
            '--del-match=iface.*' \
            '--del-match=vlan.*.trunks=*' \
            '--del-match=vlan.*.tag=*'
    fi

    start_vswitchd
    start_brcompatd
    reload_vswitchd  # ensures ovs-vswitchd has fully read config file.
    touch /var/lock/subsys/vswitch
}

function stop {
    stop_brcompatd
    stop_vswitchd
    rm -f /var/lock/subsys/vswitch
}

function restart {
    if restart_approval; then
        stop
        start
    fi
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        restart
        ;;
    reload)
        reload_vswitchd
        reload_brcompatd
        ;;
    strace-vswitchd)
        shift
        strace -p $(cat "$VSWITCHD_PIDFILE") "$@"
        ;;
    strace-brcompatd)
        shift
        strace -p $(cat "$BRCOMPATD_PIDFILE") "$@"
        ;;
    status)
        status -p "$VSWITCHD_PIDFILE" ovs-vswitchd
        status -p "$BRCOMPATD_PIDFILE" ovs-brcompatd
        ;;
    version)
        /usr/sbin/ovs-vswitchd -V
        /usr/sbin/ovs-brcompatd -V
        ;;
    help)
        printf "vswitch [start|stop|restart|reload|unload|status|version]\n"
        ;;
    *)
        printf "Unknown command: $1\n"
        exit 1
        ;;
esac
